{"ast":null,"code":"var _jsxFileName = \"/Users/khoa/Documents/Study/CS160/NewApril24/Delivery-2/wordle/src/Components/GameGrid/GameGrid.js\";\nimport React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport PropTypes from \"prop-types\";\nimport \"./GameGrid.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Item = styled(Paper)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    //return each cell component. item is cell\n    backgroundColor: \"white\",\n    ...theme.typography.body2,\n    padding: theme.spacing(2),\n    //margin between cells\n    textAlign: \"center\",\n    color: \"black\",\n    fontWeight: \"bold\",\n    fontSize: \"20sp\"\n  };\n});\n_c = Item;\nNestedGrid.propTypes = {\n  input: PropTypes.string,\n  wordList: PropTypes.array,\n  row: PropTypes.number,\n  savedColor: PropTypes.array\n};\nexport default function NestedGrid(_ref2) {\n  let {\n    input,\n    wordList,\n    row,\n    savedColor\n  } = _ref2;\n  //this function returns the grid and calls FormRow() function to create row\n  FormRow.propTypes = {\n    word: PropTypes.string,\n    colorArray: PropTypes.array\n  };\n\n  function FormRow(_ref3) {\n    let {\n      word,\n      colorArray\n    } = _ref3;\n\n    //creating each row by calling this function\n    // this function check that colorArray is not undefined and not empty\n    // and change the cell color for each cell according to colorArray\n    function checkColor(cellNum) {\n      return colorArray && colorArray.length ? colorArray[cellNum] : \"white\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: false,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          className: \"cell_style\",\n          style: {\n            background: checkColor(0)\n          },\n          children: word[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: false,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          className: \"cell_style\",\n          style: {\n            background: checkColor(1)\n          },\n          children: word[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: false,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          className: \"cell_style\",\n          style: {\n            background: checkColor(2)\n          },\n          children: word[2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: false,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          className: \"cell_style\",\n          style: {\n            background: checkColor(3)\n          },\n          children: word[3]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: false,\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          className: \"cell_style\",\n          style: {\n            background: checkColor(4)\n          },\n          children: word[4]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"Grid-box-style\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        spacing: 2,\n        children: [row !== 0 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: wordList[0],\n          colorArray: savedColor[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), row === 0 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        spacing: 2,\n        children: [row !== 1 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: wordList[1],\n          colorArray: savedColor[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), row === 1 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        spacing: 2,\n        children: [row !== 2 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: wordList[2],\n          colorArray: savedColor[2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), row === 2 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        spacing: 2,\n        children: [row !== 3 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: wordList[3],\n          colorArray: savedColor[3]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), row === 3 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        spacing: 2,\n        children: [row !== 4 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: wordList[4],\n          colorArray: savedColor[4]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), row === 4 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        spacing: 2,\n        children: [row !== 5 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: wordList[5],\n          colorArray: savedColor[5]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), row === 5 && /*#__PURE__*/_jsxDEV(FormRow, {\n          word: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_c2 = NestedGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Item\");\n$RefreshReg$(_c2, \"NestedGrid\");","map":{"version":3,"sources":["/Users/khoa/Documents/Study/CS160/NewApril24/Delivery-2/wordle/src/Components/GameGrid/GameGrid.js"],"names":["React","styled","Box","Paper","Grid","PropTypes","Item","theme","backgroundColor","typography","body2","padding","spacing","textAlign","color","fontWeight","fontSize","NestedGrid","propTypes","input","string","wordList","array","row","number","savedColor","FormRow","word","colorArray","checkColor","cellNum","length","background"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport PropTypes from \"prop-types\";\nimport \"./GameGrid.scss\";\n\nconst Item = styled(Paper)(({ theme }) => ({\n  //return each cell component. item is cell\n  backgroundColor: \"white\",\n  ...theme.typography.body2,\n  padding: theme.spacing(2), //margin between cells\n  textAlign: \"center\",\n  color: \"black\",\n  fontWeight: \"bold\",\n  fontSize: \"20sp\",\n}));\n\nNestedGrid.propTypes = {\n  input: PropTypes.string,\n  wordList: PropTypes.array,\n  row: PropTypes.number,\n  savedColor: PropTypes.array,\n};\n\nexport default function NestedGrid({ input, wordList, row, savedColor }) {\n  //this function returns the grid and calls FormRow() function to create row\n  FormRow.propTypes = {\n    word: PropTypes.string,\n    colorArray: PropTypes.array,\n  };\n\n  function FormRow({ word, colorArray }) {\n    //creating each row by calling this function\n    // this function check that colorArray is not undefined and not empty\n    // and change the cell color for each cell according to colorArray\n\n    function checkColor(cellNum) {\n      return colorArray && colorArray.length ? colorArray[cellNum] : \"white\";\n    }\n\n    return (\n      <React.Fragment>\n        <Grid item xs={false}>\n          <Item className=\"cell_style\" style={{ background: checkColor(0) }}>\n            {word[0]}\n          </Item>\n        </Grid>\n        <Grid item xs={false}>\n          <Item className=\"cell_style\" style={{ background: checkColor(1) }}>\n            {word[1]}\n          </Item>\n        </Grid>\n        <Grid item xs={false}>\n          <Item className=\"cell_style\" style={{ background: checkColor(2) }}>\n            {word[2]}\n          </Item>\n        </Grid>\n        <Grid item xs={false}>\n          <Item className=\"cell_style\" style={{ background: checkColor(3) }}>\n            {word[3]}\n          </Item>\n        </Grid>\n        <Grid item xs={false}>\n          <Item className=\"cell_style\" style={{ background: checkColor(4) }}>\n            {word[4]}\n          </Item>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n  return (\n    <Box className=\"Grid-box-style\">\n      <Grid container spacing={1}>\n        <Grid container item spacing={2}>\n          {row !== 0 && (\n            <FormRow word={wordList[0]} colorArray={savedColor[0]} />\n          )}\n          {row === 0 && <FormRow word={input} />}\n        </Grid>\n        <Grid container item spacing={2}>\n          {row !== 1 && (\n            <FormRow word={wordList[1]} colorArray={savedColor[1]} />\n          )}\n          {row === 1 && <FormRow word={input} />}\n        </Grid>\n        <Grid container item spacing={2}>\n          {row !== 2 && (\n            <FormRow word={wordList[2]} colorArray={savedColor[2]} />\n          )}\n          {row === 2 && <FormRow word={input} />}\n        </Grid>\n        <Grid container item spacing={2}>\n          {row !== 3 && (\n            <FormRow word={wordList[3]} colorArray={savedColor[3]} />\n          )}\n          {row === 3 && <FormRow word={input} />}\n        </Grid>\n        <Grid container item spacing={2}>\n          {row !== 4 && (\n            <FormRow word={wordList[4]} colorArray={savedColor[4]} />\n          )}\n          {row === 4 && <FormRow word={input} />}\n        </Grid>\n        <Grid container item spacing={2}>\n          {row !== 5 && (\n            <FormRow word={wordList[5]} colorArray={savedColor[5]} />\n          )}\n          {row === 5 && <FormRow word={input} />}\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const gameUtils = {\n  inputCheck(word, userInput) {\n    let inputResults = new Array(); //initializing Map to track character count in solution word\n\n    const charCountMap = new Map();\n\n    for (let i = 0; i < word.length; i++) {\n      if (!charCountMap.has(word[i])) {\n        charCountMap.set(word[i], 1);\n      } else {\n        charCountMap.set(word[i], charCountMap.get(word[i]) + 1);\n      }\n    } //Go through user input once to see if any letters are in the right place;\n    // if so, decrement hashmap value entry\n\n\n    for (let i = 0; i < word.length; i++) {\n      if (userInput[i] == word[i]) {\n        inputResults[i] = \"Y\";\n        charCountMap.set(word[i], charCountMap.get(word[i]) - 1);\n      }\n    } //Go through user input a second time to check for partial and wrong letters\n    // if partial correct found, decrement hashmap value entry\n\n\n    for (let i = 0; i < word.length; i++) {\n      if (word.includes(userInput[i]) && charCountMap.get(userInput[i]) > 0 && inputResults[i] != 'Y') {\n        inputResults[i] = \"P\";\n        charCountMap.set(userInput[i], charCountMap.get(userInput[i]) - 1);\n      } else if (inputResults[i] != \"Y\") {\n        inputResults[i] = \"N\";\n      }\n    }\n\n    return inputResults;\n  },\n\n  isCorrect(guessed) {\n    if (guessed.includes(\"N\") || guessed.includes(\"P\")) {\n      return false;\n    }\n\n    return true;\n  },\n\n  usedLetters(userInput, feedback, oldLetters) {\n    for (let i = 0; i < userInput.length; i++) {\n      let index = userInput[i].charCodeAt() - \"A\".charCodeAt();\n\n      if (feedback[i] == \"Y\") {\n        oldLetters[index] = \"Y\";\n      } else if (feedback[i] == \"P\" && oldLetters[index] != \"Y\") {\n        oldLetters[index] = \"P\";\n      } else if (feedback[i] == \"N\" && oldLetters[index] != \"Y\" && oldLetters[index] != \"P\") {\n        oldLetters[index] = \"N\";\n      }\n    }\n\n    return oldLetters;\n  },\n\n  // this function is called in keyboard.js file in enterClick() function\n  // when the function is called it returns color array according to the feedback\n  // this function is for setting the color for the grid\n  colorArray(feedback) {\n    let colorArray = [];\n\n    if (feedback && Array.isArray(feedback) && feedback.length) {\n      for (let i = 0; i < feedback.length; i++) {\n        switch (feedback[i]) {\n          case \"Y\":\n            colorArray[i] = \"green\";\n            break;\n\n          case \"N\":\n            colorArray[i] = \"gray\";\n            break;\n\n          case \"P\":\n            colorArray[i] = \"yellow\";\n            break;\n\n          default:\n        }\n      }\n    }\n\n    return colorArray;\n  },\n\n  //this function is called in Keyboard.js file\n  //to set color style for each key for the key button\n  eachKeyColor(letter, usedLetters) {\n    if (usedLetters && Array.isArray(usedLetters) && usedLetters.length) {\n      if (usedLetters[letter.charCodeAt() - \"A\".charCodeAt()] == \"Y\") return \"key-correct\";else if (usedLetters[letter.charCodeAt() - \"A\".charCodeAt()] == \"N\") return \"key-wrong\";else if (usedLetters[letter.charCodeAt() - \"A\".charCodeAt()] == \"P\") return \"key-partial\";else return \"key\";\n    }\n  }\n\n};\nexport default gameUtils;","map":{"version":3,"sources":["/Users/khoa/Documents/Study/CS160/NewApril24/Delivery-2/wordle/src/Utils/gameUtils.js"],"names":["gameUtils","inputCheck","word","userInput","inputResults","Array","charCountMap","Map","i","length","has","set","get","includes","isCorrect","guessed","usedLetters","feedback","oldLetters","index","charCodeAt","colorArray","isArray","eachKeyColor","letter"],"mappings":"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","sourcesContent":["const gameUtils = {\n  inputCheck(word, userInput) {\n    let inputResults = new Array();\n\n    //initializing Map to track character count in solution word\n    const charCountMap = new Map();\n    for (let i = 0; i < word.length; i++) {\n      if (!charCountMap.has(word[i])) {\n        charCountMap.set(word[i], 1);\n      } else {\n        charCountMap.set(word[i], charCountMap.get(word[i]) + 1);\n      }\n    }\n\n    //Go through user input once to see if any letters are in the right place;\n    // if so, decrement hashmap value entry\n    for (let i = 0; i < word.length; i++) {\n      if (userInput[i] == word[i]) {\n        inputResults[i] = \"Y\";\n        charCountMap.set(word[i], charCountMap.get(word[i]) - 1);\n      }\n    }\n\n    //Go through user input a second time to check for partial and wrong letters\n    // if partial correct found, decrement hashmap value entry\n    for (let i = 0; i < word.length; i++) {\n      if (word.includes(userInput[i]) && charCountMap.get(userInput[i]) > 0 && inputResults[i] != 'Y') {\n        inputResults[i] = \"P\";\n        charCountMap.set(userInput[i], charCountMap.get(userInput[i]) - 1);\n      } else if (inputResults[i] != \"Y\") {\n        inputResults[i] = \"N\";\n      }\n    }\n    return inputResults;\n  },\n\n  isCorrect(guessed) {\n    if (guessed.includes(\"N\") || guessed.includes(\"P\")) {\n      return false;\n    }\n    return true;\n  },\n\n  usedLetters(userInput, feedback, oldLetters) {\n    for (let i = 0; i < userInput.length; i++) {\n      let index = userInput[i].charCodeAt() - \"A\".charCodeAt();\n      if (feedback[i] == \"Y\") {\n        oldLetters[index] = \"Y\";\n      } else if (feedback[i] == \"P\" && oldLetters[index] != \"Y\") {\n        oldLetters[index] = \"P\";\n      } else if (\n        feedback[i] == \"N\" &&\n        oldLetters[index] != \"Y\" &&\n        oldLetters[index] != \"P\"\n      ) {\n        oldLetters[index] = \"N\";\n      }\n    }\n    return oldLetters;\n  },\n\n  // this function is called in keyboard.js file in enterClick() function\n  // when the function is called it returns color array according to the feedback\n  // this function is for setting the color for the grid\n  colorArray(feedback) {\n    let colorArray = [];\n    if (feedback && Array.isArray(feedback) && feedback.length) {\n      for (let i = 0; i < feedback.length; i++) {\n        switch (feedback[i]) {\n          case \"Y\":\n            colorArray[i] = \"green\";\n            break;\n          case \"N\":\n            colorArray[i] = \"gray\";\n            break;\n          case \"P\":\n            colorArray[i] = \"yellow\";\n            break;\n          default:\n        }\n      }\n    }\n    return colorArray;\n  },\n\n  //this function is called in Keyboard.js file\n  //to set color style for each key for the key button\n  eachKeyColor(letter, usedLetters) {\n    if (usedLetters && Array.isArray(usedLetters) && usedLetters.length) {\n      if (usedLetters[letter.charCodeAt() - \"A\".charCodeAt()] == \"Y\")\n        return \"key-correct\";\n      else if (usedLetters[letter.charCodeAt() - \"A\".charCodeAt()] == \"N\")\n        return \"key-wrong\";\n      else if (usedLetters[letter.charCodeAt() - \"A\".charCodeAt()] == \"P\")\n        return \"key-partial\";\n      else return \"key\";\n    }\n  },\n};\n\nexport default gameUtils;\n"]},"metadata":{},"sourceType":"module"}